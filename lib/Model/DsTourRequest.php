<?php
/**
 * DsTourRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InfocenterUpdate-TEST
 *
 * Infocenter Update test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InfocenterUpdate\Client\Model;

use \ArrayAccess;
use \InfocenterUpdate\Client\ObjectSerializer;

/**
 * DsTourRequest Class Doc Comment
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsTourRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'winter_activity' => 'bool',
'length' => 'double',
'time' => 'int',
'elevation' => '\InfocenterUpdate\Client\Model\DsTourElevationRequest',
'rating' => '\InfocenterUpdate\Client\Model\DsTourRatingRequest',
'season' => '\InfocenterUpdate\Client\Model\DsTourSeasonRequest',
'state' => 'string',
'title' => 'map[string,string]',
'starting_point_description' => 'map[string,string]',
'safety_guidelines' => 'map[string,string]',
'equipment' => 'map[string,string]',
'tip' => 'map[string,string]',
'additional_information' => 'map[string,string]',
'destination' => 'map[string,string]',
'track_signage' => 'map[string,string]',
'literature' => 'map[string,string]',
'maps' => 'map[string,string]',
'source_id' => 'string',
'auto_translate' => 'bool',
'address' => '\InfocenterUpdate\Client\Model\DsPostalAddressRequest',
'category' => 'string[]',
'geo' => '\InfocenterUpdate\Client\Model\DsGeoCoordinatesRequest',
'geo_shape' => '\InfocenterUpdate\Client\Model\DsGeoShapeRequest',
'is_accessible_for_free' => 'bool',
'maximum_attendee_capacity' => 'int',
'photo' => '\InfocenterUpdate\Client\Model\DsImageObjectRequest[]',
'public_access' => 'bool',
'telephone' => 'string',
'located' => 'string[]',
'available_language' => 'string[]',
'tag' => 'string[]',
'osm_id' => 'string',
'public_transport' => 'map[string,string]',
'getting_there' => 'map[string,string]',
'parking' => 'map[string,string]',
'directions' => 'map[string,string]',
'fees' => 'map[string,string]',
'data_governance' => '\InfocenterUpdate\Client\Model\DsDataGovernanceRequest',
'additional_type' => 'string',
'alternate_name' => 'string',
'link' => '\InfocenterUpdate\Client\Model\DsLinkRequest[]',
'same_as' => 'string',
'url' => 'string',
'image' => '\InfocenterUpdate\Client\Model\DsImageObjectRequest',
'description' => 'map[string,string]',
'disambiguating_description' => 'map[string,string]',
'name' => 'map[string,string]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'winter_activity' => null,
'length' => 'double',
'time' => 'int32',
'elevation' => null,
'rating' => null,
'season' => null,
'state' => null,
'title' => null,
'starting_point_description' => null,
'safety_guidelines' => null,
'equipment' => null,
'tip' => null,
'additional_information' => null,
'destination' => null,
'track_signage' => null,
'literature' => null,
'maps' => null,
'source_id' => null,
'auto_translate' => null,
'address' => null,
'category' => null,
'geo' => null,
'geo_shape' => null,
'is_accessible_for_free' => null,
'maximum_attendee_capacity' => 'int32',
'photo' => null,
'public_access' => null,
'telephone' => null,
'located' => null,
'available_language' => null,
'tag' => null,
'osm_id' => null,
'public_transport' => null,
'getting_there' => null,
'parking' => null,
'directions' => null,
'fees' => null,
'data_governance' => null,
'additional_type' => null,
'alternate_name' => null,
'link' => null,
'same_as' => null,
'url' => null,
'image' => null,
'description' => null,
'disambiguating_description' => null,
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'winter_activity' => 'winterActivity',
'length' => 'length',
'time' => 'time',
'elevation' => 'elevation',
'rating' => 'rating',
'season' => 'season',
'state' => 'state',
'title' => 'title',
'starting_point_description' => 'startingPointDescription',
'safety_guidelines' => 'safetyGuidelines',
'equipment' => 'equipment',
'tip' => 'tip',
'additional_information' => 'additionalInformation',
'destination' => 'destination',
'track_signage' => 'trackSignage',
'literature' => 'literature',
'maps' => 'maps',
'source_id' => 'sourceId',
'auto_translate' => 'autoTranslate',
'address' => 'address',
'category' => 'category',
'geo' => 'geo',
'geo_shape' => 'geoShape',
'is_accessible_for_free' => 'isAccessibleForFree',
'maximum_attendee_capacity' => 'maximumAttendeeCapacity',
'photo' => 'photo',
'public_access' => 'publicAccess',
'telephone' => 'telephone',
'located' => 'located',
'available_language' => 'availableLanguage',
'tag' => 'tag',
'osm_id' => 'osm_id',
'public_transport' => 'publicTransport',
'getting_there' => 'gettingThere',
'parking' => 'parking',
'directions' => 'directions',
'fees' => 'fees',
'data_governance' => 'dataGovernance',
'additional_type' => 'additionalType',
'alternate_name' => 'alternateName',
'link' => 'link',
'same_as' => 'sameAs',
'url' => 'url',
'image' => 'image',
'description' => 'description',
'disambiguating_description' => 'disambiguatingDescription',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'winter_activity' => 'setWinterActivity',
'length' => 'setLength',
'time' => 'setTime',
'elevation' => 'setElevation',
'rating' => 'setRating',
'season' => 'setSeason',
'state' => 'setState',
'title' => 'setTitle',
'starting_point_description' => 'setStartingPointDescription',
'safety_guidelines' => 'setSafetyGuidelines',
'equipment' => 'setEquipment',
'tip' => 'setTip',
'additional_information' => 'setAdditionalInformation',
'destination' => 'setDestination',
'track_signage' => 'setTrackSignage',
'literature' => 'setLiterature',
'maps' => 'setMaps',
'source_id' => 'setSourceId',
'auto_translate' => 'setAutoTranslate',
'address' => 'setAddress',
'category' => 'setCategory',
'geo' => 'setGeo',
'geo_shape' => 'setGeoShape',
'is_accessible_for_free' => 'setIsAccessibleForFree',
'maximum_attendee_capacity' => 'setMaximumAttendeeCapacity',
'photo' => 'setPhoto',
'public_access' => 'setPublicAccess',
'telephone' => 'setTelephone',
'located' => 'setLocated',
'available_language' => 'setAvailableLanguage',
'tag' => 'setTag',
'osm_id' => 'setOsmId',
'public_transport' => 'setPublicTransport',
'getting_there' => 'setGettingThere',
'parking' => 'setParking',
'directions' => 'setDirections',
'fees' => 'setFees',
'data_governance' => 'setDataGovernance',
'additional_type' => 'setAdditionalType',
'alternate_name' => 'setAlternateName',
'link' => 'setLink',
'same_as' => 'setSameAs',
'url' => 'setUrl',
'image' => 'setImage',
'description' => 'setDescription',
'disambiguating_description' => 'setDisambiguatingDescription',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'winter_activity' => 'getWinterActivity',
'length' => 'getLength',
'time' => 'getTime',
'elevation' => 'getElevation',
'rating' => 'getRating',
'season' => 'getSeason',
'state' => 'getState',
'title' => 'getTitle',
'starting_point_description' => 'getStartingPointDescription',
'safety_guidelines' => 'getSafetyGuidelines',
'equipment' => 'getEquipment',
'tip' => 'getTip',
'additional_information' => 'getAdditionalInformation',
'destination' => 'getDestination',
'track_signage' => 'getTrackSignage',
'literature' => 'getLiterature',
'maps' => 'getMaps',
'source_id' => 'getSourceId',
'auto_translate' => 'getAutoTranslate',
'address' => 'getAddress',
'category' => 'getCategory',
'geo' => 'getGeo',
'geo_shape' => 'getGeoShape',
'is_accessible_for_free' => 'getIsAccessibleForFree',
'maximum_attendee_capacity' => 'getMaximumAttendeeCapacity',
'photo' => 'getPhoto',
'public_access' => 'getPublicAccess',
'telephone' => 'getTelephone',
'located' => 'getLocated',
'available_language' => 'getAvailableLanguage',
'tag' => 'getTag',
'osm_id' => 'getOsmId',
'public_transport' => 'getPublicTransport',
'getting_there' => 'getGettingThere',
'parking' => 'getParking',
'directions' => 'getDirections',
'fees' => 'getFees',
'data_governance' => 'getDataGovernance',
'additional_type' => 'getAdditionalType',
'alternate_name' => 'getAlternateName',
'link' => 'getLink',
'same_as' => 'getSameAs',
'url' => 'getUrl',
'image' => 'getImage',
'description' => 'getDescription',
'disambiguating_description' => 'getDisambiguatingDescription',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['winter_activity'] = isset($data['winter_activity']) ? $data['winter_activity'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['elevation'] = isset($data['elevation']) ? $data['elevation'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['starting_point_description'] = isset($data['starting_point_description']) ? $data['starting_point_description'] : null;
        $this->container['safety_guidelines'] = isset($data['safety_guidelines']) ? $data['safety_guidelines'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['tip'] = isset($data['tip']) ? $data['tip'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['track_signage'] = isset($data['track_signage']) ? $data['track_signage'] : null;
        $this->container['literature'] = isset($data['literature']) ? $data['literature'] : null;
        $this->container['maps'] = isset($data['maps']) ? $data['maps'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['auto_translate'] = isset($data['auto_translate']) ? $data['auto_translate'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['geo_shape'] = isset($data['geo_shape']) ? $data['geo_shape'] : null;
        $this->container['is_accessible_for_free'] = isset($data['is_accessible_for_free']) ? $data['is_accessible_for_free'] : null;
        $this->container['maximum_attendee_capacity'] = isset($data['maximum_attendee_capacity']) ? $data['maximum_attendee_capacity'] : null;
        $this->container['photo'] = isset($data['photo']) ? $data['photo'] : null;
        $this->container['public_access'] = isset($data['public_access']) ? $data['public_access'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['located'] = isset($data['located']) ? $data['located'] : null;
        $this->container['available_language'] = isset($data['available_language']) ? $data['available_language'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['osm_id'] = isset($data['osm_id']) ? $data['osm_id'] : null;
        $this->container['public_transport'] = isset($data['public_transport']) ? $data['public_transport'] : null;
        $this->container['getting_there'] = isset($data['getting_there']) ? $data['getting_there'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['directions'] = isset($data['directions']) ? $data['directions'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['data_governance'] = isset($data['data_governance']) ? $data['data_governance'] : null;
        $this->container['additional_type'] = isset($data['additional_type']) ? $data['additional_type'] : null;
        $this->container['alternate_name'] = isset($data['alternate_name']) ? $data['alternate_name'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['same_as'] = isset($data['same_as']) ? $data['same_as'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disambiguating_description'] = isset($data['disambiguating_description']) ? $data['disambiguating_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets winter_activity
     *
     * @return bool
     */
    public function getWinterActivity()
    {
        return $this->container['winter_activity'];
    }

    /**
     * Sets winter_activity
     *
     * @param bool $winter_activity winter_activity
     *
     * @return $this
     */
    public function setWinterActivity($winter_activity)
    {
        $this->container['winter_activity'] = $winter_activity;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets elevation
     *
     * @return \InfocenterUpdate\Client\Model\DsTourElevationRequest
     */
    public function getElevation()
    {
        return $this->container['elevation'];
    }

    /**
     * Sets elevation
     *
     * @param \InfocenterUpdate\Client\Model\DsTourElevationRequest $elevation elevation
     *
     * @return $this
     */
    public function setElevation($elevation)
    {
        $this->container['elevation'] = $elevation;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return \InfocenterUpdate\Client\Model\DsTourRatingRequest
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param \InfocenterUpdate\Client\Model\DsTourRatingRequest $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets season
     *
     * @return \InfocenterUpdate\Client\Model\DsTourSeasonRequest
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param \InfocenterUpdate\Client\Model\DsTourSeasonRequest $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return map[string,string]
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param map[string,string] $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets starting_point_description
     *
     * @return map[string,string]
     */
    public function getStartingPointDescription()
    {
        return $this->container['starting_point_description'];
    }

    /**
     * Sets starting_point_description
     *
     * @param map[string,string] $starting_point_description starting_point_description
     *
     * @return $this
     */
    public function setStartingPointDescription($starting_point_description)
    {
        $this->container['starting_point_description'] = $starting_point_description;

        return $this;
    }

    /**
     * Gets safety_guidelines
     *
     * @return map[string,string]
     */
    public function getSafetyGuidelines()
    {
        return $this->container['safety_guidelines'];
    }

    /**
     * Sets safety_guidelines
     *
     * @param map[string,string] $safety_guidelines safety_guidelines
     *
     * @return $this
     */
    public function setSafetyGuidelines($safety_guidelines)
    {
        $this->container['safety_guidelines'] = $safety_guidelines;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return map[string,string]
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param map[string,string] $equipment equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return map[string,string]
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param map[string,string] $tip tip
     *
     * @return $this
     */
    public function setTip($tip)
    {
        $this->container['tip'] = $tip;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return map[string,string]
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param map[string,string] $additional_information additional_information
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return map[string,string]
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param map[string,string] $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets track_signage
     *
     * @return map[string,string]
     */
    public function getTrackSignage()
    {
        return $this->container['track_signage'];
    }

    /**
     * Sets track_signage
     *
     * @param map[string,string] $track_signage track_signage
     *
     * @return $this
     */
    public function setTrackSignage($track_signage)
    {
        $this->container['track_signage'] = $track_signage;

        return $this;
    }

    /**
     * Gets literature
     *
     * @return map[string,string]
     */
    public function getLiterature()
    {
        return $this->container['literature'];
    }

    /**
     * Sets literature
     *
     * @param map[string,string] $literature literature
     *
     * @return $this
     */
    public function setLiterature($literature)
    {
        $this->container['literature'] = $literature;

        return $this;
    }

    /**
     * Gets maps
     *
     * @return map[string,string]
     */
    public function getMaps()
    {
        return $this->container['maps'];
    }

    /**
     * Sets maps
     *
     * @param map[string,string] $maps maps
     *
     * @return $this
     */
    public function setMaps($maps)
    {
        $this->container['maps'] = $maps;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets auto_translate
     *
     * @return bool
     */
    public function getAutoTranslate()
    {
        return $this->container['auto_translate'];
    }

    /**
     * Sets auto_translate
     *
     * @param bool $auto_translate auto_translate
     *
     * @return $this
     */
    public function setAutoTranslate($auto_translate)
    {
        $this->container['auto_translate'] = $auto_translate;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \InfocenterUpdate\Client\Model\DsPostalAddressRequest
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \InfocenterUpdate\Client\Model\DsPostalAddressRequest $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string[]
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string[] $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \InfocenterUpdate\Client\Model\DsGeoCoordinatesRequest
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \InfocenterUpdate\Client\Model\DsGeoCoordinatesRequest $geo geo
     *
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets geo_shape
     *
     * @return \InfocenterUpdate\Client\Model\DsGeoShapeRequest
     */
    public function getGeoShape()
    {
        return $this->container['geo_shape'];
    }

    /**
     * Sets geo_shape
     *
     * @param \InfocenterUpdate\Client\Model\DsGeoShapeRequest $geo_shape geo_shape
     *
     * @return $this
     */
    public function setGeoShape($geo_shape)
    {
        $this->container['geo_shape'] = $geo_shape;

        return $this;
    }

    /**
     * Gets is_accessible_for_free
     *
     * @return bool
     */
    public function getIsAccessibleForFree()
    {
        return $this->container['is_accessible_for_free'];
    }

    /**
     * Sets is_accessible_for_free
     *
     * @param bool $is_accessible_for_free is_accessible_for_free
     *
     * @return $this
     */
    public function setIsAccessibleForFree($is_accessible_for_free)
    {
        $this->container['is_accessible_for_free'] = $is_accessible_for_free;

        return $this;
    }

    /**
     * Gets maximum_attendee_capacity
     *
     * @return int
     */
    public function getMaximumAttendeeCapacity()
    {
        return $this->container['maximum_attendee_capacity'];
    }

    /**
     * Sets maximum_attendee_capacity
     *
     * @param int $maximum_attendee_capacity maximum_attendee_capacity
     *
     * @return $this
     */
    public function setMaximumAttendeeCapacity($maximum_attendee_capacity)
    {
        $this->container['maximum_attendee_capacity'] = $maximum_attendee_capacity;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return \InfocenterUpdate\Client\Model\DsImageObjectRequest[]
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param \InfocenterUpdate\Client\Model\DsImageObjectRequest[] $photo photo
     *
     * @return $this
     */
    public function setPhoto($photo)
    {
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets public_access
     *
     * @return bool
     */
    public function getPublicAccess()
    {
        return $this->container['public_access'];
    }

    /**
     * Sets public_access
     *
     * @param bool $public_access public_access
     *
     * @return $this
     */
    public function setPublicAccess($public_access)
    {
        $this->container['public_access'] = $public_access;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets located
     *
     * @return string[]
     */
    public function getLocated()
    {
        return $this->container['located'];
    }

    /**
     * Sets located
     *
     * @param string[] $located located
     *
     * @return $this
     */
    public function setLocated($located)
    {
        $this->container['located'] = $located;

        return $this;
    }

    /**
     * Gets available_language
     *
     * @return string[]
     */
    public function getAvailableLanguage()
    {
        return $this->container['available_language'];
    }

    /**
     * Sets available_language
     *
     * @param string[] $available_language available_language
     *
     * @return $this
     */
    public function setAvailableLanguage($available_language)
    {
        $this->container['available_language'] = $available_language;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[] $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets osm_id
     *
     * @return string
     */
    public function getOsmId()
    {
        return $this->container['osm_id'];
    }

    /**
     * Sets osm_id
     *
     * @param string $osm_id osm_id
     *
     * @return $this
     */
    public function setOsmId($osm_id)
    {
        $this->container['osm_id'] = $osm_id;

        return $this;
    }

    /**
     * Gets public_transport
     *
     * @return map[string,string]
     */
    public function getPublicTransport()
    {
        return $this->container['public_transport'];
    }

    /**
     * Sets public_transport
     *
     * @param map[string,string] $public_transport public_transport
     *
     * @return $this
     */
    public function setPublicTransport($public_transport)
    {
        $this->container['public_transport'] = $public_transport;

        return $this;
    }

    /**
     * Gets getting_there
     *
     * @return map[string,string]
     */
    public function getGettingThere()
    {
        return $this->container['getting_there'];
    }

    /**
     * Sets getting_there
     *
     * @param map[string,string] $getting_there getting_there
     *
     * @return $this
     */
    public function setGettingThere($getting_there)
    {
        $this->container['getting_there'] = $getting_there;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return map[string,string]
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param map[string,string] $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets directions
     *
     * @return map[string,string]
     */
    public function getDirections()
    {
        return $this->container['directions'];
    }

    /**
     * Sets directions
     *
     * @param map[string,string] $directions directions
     *
     * @return $this
     */
    public function setDirections($directions)
    {
        $this->container['directions'] = $directions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return map[string,string]
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param map[string,string] $fees fees
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets data_governance
     *
     * @return \InfocenterUpdate\Client\Model\DsDataGovernanceRequest
     */
    public function getDataGovernance()
    {
        return $this->container['data_governance'];
    }

    /**
     * Sets data_governance
     *
     * @param \InfocenterUpdate\Client\Model\DsDataGovernanceRequest $data_governance data_governance
     *
     * @return $this
     */
    public function setDataGovernance($data_governance)
    {
        $this->container['data_governance'] = $data_governance;

        return $this;
    }

    /**
     * Gets additional_type
     *
     * @return string
     */
    public function getAdditionalType()
    {
        return $this->container['additional_type'];
    }

    /**
     * Sets additional_type
     *
     * @param string $additional_type additional_type
     *
     * @return $this
     */
    public function setAdditionalType($additional_type)
    {
        $this->container['additional_type'] = $additional_type;

        return $this;
    }

    /**
     * Gets alternate_name
     *
     * @return string
     */
    public function getAlternateName()
    {
        return $this->container['alternate_name'];
    }

    /**
     * Sets alternate_name
     *
     * @param string $alternate_name alternate_name
     *
     * @return $this
     */
    public function setAlternateName($alternate_name)
    {
        $this->container['alternate_name'] = $alternate_name;

        return $this;
    }

    /**
     * Gets link
     *
     * @return \InfocenterUpdate\Client\Model\DsLinkRequest[]
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \InfocenterUpdate\Client\Model\DsLinkRequest[] $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets same_as
     *
     * @return string
     */
    public function getSameAs()
    {
        return $this->container['same_as'];
    }

    /**
     * Sets same_as
     *
     * @param string $same_as same_as
     *
     * @return $this
     */
    public function setSameAs($same_as)
    {
        $this->container['same_as'] = $same_as;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \InfocenterUpdate\Client\Model\DsImageObjectRequest
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \InfocenterUpdate\Client\Model\DsImageObjectRequest $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets description
     *
     * @return map[string,string]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param map[string,string] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disambiguating_description
     *
     * @return map[string,string]
     */
    public function getDisambiguatingDescription()
    {
        return $this->container['disambiguating_description'];
    }

    /**
     * Sets disambiguating_description
     *
     * @param map[string,string] $disambiguating_description disambiguating_description
     *
     * @return $this
     */
    public function setDisambiguatingDescription($disambiguating_description)
    {
        $this->container['disambiguating_description'] = $disambiguating_description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return map[string,string]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param map[string,string] $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
