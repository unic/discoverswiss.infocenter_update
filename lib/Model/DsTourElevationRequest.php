<?php
/**
 * DsTourElevationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InfocenterUpdate-TEST
 *
 * Infocenter Update test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InfocenterUpdate\Client\Model;

use \ArrayAccess;
use \InfocenterUpdate\Client\ObjectSerializer;

/**
 * DsTourElevationRequest Class Doc Comment
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsTourElevationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourElevationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ascent' => 'int',
'descent' => 'int',
'min_altitude' => 'int',
'max_altitude' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ascent' => 'int32',
'descent' => 'int32',
'min_altitude' => 'int32',
'max_altitude' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ascent' => 'ascent',
'descent' => 'descent',
'min_altitude' => 'minAltitude',
'max_altitude' => 'maxAltitude'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ascent' => 'setAscent',
'descent' => 'setDescent',
'min_altitude' => 'setMinAltitude',
'max_altitude' => 'setMaxAltitude'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ascent' => 'getAscent',
'descent' => 'getDescent',
'min_altitude' => 'getMinAltitude',
'max_altitude' => 'getMaxAltitude'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ascent'] = isset($data['ascent']) ? $data['ascent'] : null;
        $this->container['descent'] = isset($data['descent']) ? $data['descent'] : null;
        $this->container['min_altitude'] = isset($data['min_altitude']) ? $data['min_altitude'] : null;
        $this->container['max_altitude'] = isset($data['max_altitude']) ? $data['max_altitude'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ascent
     *
     * @return int
     */
    public function getAscent()
    {
        return $this->container['ascent'];
    }

    /**
     * Sets ascent
     *
     * @param int $ascent ascent
     *
     * @return $this
     */
    public function setAscent($ascent)
    {
        $this->container['ascent'] = $ascent;

        return $this;
    }

    /**
     * Gets descent
     *
     * @return int
     */
    public function getDescent()
    {
        return $this->container['descent'];
    }

    /**
     * Sets descent
     *
     * @param int $descent descent
     *
     * @return $this
     */
    public function setDescent($descent)
    {
        $this->container['descent'] = $descent;

        return $this;
    }

    /**
     * Gets min_altitude
     *
     * @return int
     */
    public function getMinAltitude()
    {
        return $this->container['min_altitude'];
    }

    /**
     * Sets min_altitude
     *
     * @param int $min_altitude min_altitude
     *
     * @return $this
     */
    public function setMinAltitude($min_altitude)
    {
        $this->container['min_altitude'] = $min_altitude;

        return $this;
    }

    /**
     * Gets max_altitude
     *
     * @return int
     */
    public function getMaxAltitude()
    {
        return $this->container['max_altitude'];
    }

    /**
     * Sets max_altitude
     *
     * @param int $max_altitude max_altitude
     *
     * @return $this
     */
    public function setMaxAltitude($max_altitude)
    {
        $this->container['max_altitude'] = $max_altitude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
