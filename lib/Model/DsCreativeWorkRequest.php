<?php
/**
 * DsCreativeWorkRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InfocenterUpdate-TEST
 *
 * Infocenter Update test-v2
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InfocenterUpdate\Client\Model;

use \ArrayAccess;
use \InfocenterUpdate\Client\ObjectSerializer;

/**
 * DsCreativeWorkRequest Class Doc Comment
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsCreativeWorkRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreativeWorkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content_reference_time' => '\DateTime',
'copyright_year' => 'double',
'encoding_format' => 'string',
'is_accessible_for_free' => 'bool',
'thumbnail_url' => 'string',
'in_language' => 'string',
'category' => 'string[]',
'additional_type' => 'string',
'alternate_name' => 'string',
'tag' => 'string[]',
'link' => '\InfocenterUpdate\Client\Model\DsLinkRequest[]',
'same_as' => 'string',
'url' => 'string',
'description' => 'map[string,string]',
'disambiguating_description' => 'map[string,string]',
'name' => 'map[string,string]',
'source_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content_reference_time' => 'date-time',
'copyright_year' => 'double',
'encoding_format' => null,
'is_accessible_for_free' => null,
'thumbnail_url' => null,
'in_language' => null,
'category' => null,
'additional_type' => null,
'alternate_name' => null,
'tag' => null,
'link' => null,
'same_as' => null,
'url' => null,
'description' => null,
'disambiguating_description' => null,
'name' => null,
'source_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_reference_time' => 'contentReferenceTime',
'copyright_year' => 'copyrightYear',
'encoding_format' => 'encodingFormat',
'is_accessible_for_free' => 'isAccessibleForFree',
'thumbnail_url' => 'thumbnailUrl',
'in_language' => 'inLanguage',
'category' => 'category',
'additional_type' => 'additionalType',
'alternate_name' => 'alternateName',
'tag' => 'tag',
'link' => 'link',
'same_as' => 'sameAs',
'url' => 'url',
'description' => 'description',
'disambiguating_description' => 'disambiguatingDescription',
'name' => 'name',
'source_id' => 'sourceId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_reference_time' => 'setContentReferenceTime',
'copyright_year' => 'setCopyrightYear',
'encoding_format' => 'setEncodingFormat',
'is_accessible_for_free' => 'setIsAccessibleForFree',
'thumbnail_url' => 'setThumbnailUrl',
'in_language' => 'setInLanguage',
'category' => 'setCategory',
'additional_type' => 'setAdditionalType',
'alternate_name' => 'setAlternateName',
'tag' => 'setTag',
'link' => 'setLink',
'same_as' => 'setSameAs',
'url' => 'setUrl',
'description' => 'setDescription',
'disambiguating_description' => 'setDisambiguatingDescription',
'name' => 'setName',
'source_id' => 'setSourceId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_reference_time' => 'getContentReferenceTime',
'copyright_year' => 'getCopyrightYear',
'encoding_format' => 'getEncodingFormat',
'is_accessible_for_free' => 'getIsAccessibleForFree',
'thumbnail_url' => 'getThumbnailUrl',
'in_language' => 'getInLanguage',
'category' => 'getCategory',
'additional_type' => 'getAdditionalType',
'alternate_name' => 'getAlternateName',
'tag' => 'getTag',
'link' => 'getLink',
'same_as' => 'getSameAs',
'url' => 'getUrl',
'description' => 'getDescription',
'disambiguating_description' => 'getDisambiguatingDescription',
'name' => 'getName',
'source_id' => 'getSourceId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_reference_time'] = isset($data['content_reference_time']) ? $data['content_reference_time'] : null;
        $this->container['copyright_year'] = isset($data['copyright_year']) ? $data['copyright_year'] : null;
        $this->container['encoding_format'] = isset($data['encoding_format']) ? $data['encoding_format'] : null;
        $this->container['is_accessible_for_free'] = isset($data['is_accessible_for_free']) ? $data['is_accessible_for_free'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['in_language'] = isset($data['in_language']) ? $data['in_language'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['additional_type'] = isset($data['additional_type']) ? $data['additional_type'] : null;
        $this->container['alternate_name'] = isset($data['alternate_name']) ? $data['alternate_name'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['same_as'] = isset($data['same_as']) ? $data['same_as'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disambiguating_description'] = isset($data['disambiguating_description']) ? $data['disambiguating_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_reference_time
     *
     * @return \DateTime
     */
    public function getContentReferenceTime()
    {
        return $this->container['content_reference_time'];
    }

    /**
     * Sets content_reference_time
     *
     * @param \DateTime $content_reference_time content_reference_time
     *
     * @return $this
     */
    public function setContentReferenceTime($content_reference_time)
    {
        $this->container['content_reference_time'] = $content_reference_time;

        return $this;
    }

    /**
     * Gets copyright_year
     *
     * @return double
     */
    public function getCopyrightYear()
    {
        return $this->container['copyright_year'];
    }

    /**
     * Sets copyright_year
     *
     * @param double $copyright_year copyright_year
     *
     * @return $this
     */
    public function setCopyrightYear($copyright_year)
    {
        $this->container['copyright_year'] = $copyright_year;

        return $this;
    }

    /**
     * Gets encoding_format
     *
     * @return string
     */
    public function getEncodingFormat()
    {
        return $this->container['encoding_format'];
    }

    /**
     * Sets encoding_format
     *
     * @param string $encoding_format encoding_format
     *
     * @return $this
     */
    public function setEncodingFormat($encoding_format)
    {
        $this->container['encoding_format'] = $encoding_format;

        return $this;
    }

    /**
     * Gets is_accessible_for_free
     *
     * @return bool
     */
    public function getIsAccessibleForFree()
    {
        return $this->container['is_accessible_for_free'];
    }

    /**
     * Sets is_accessible_for_free
     *
     * @param bool $is_accessible_for_free is_accessible_for_free
     *
     * @return $this
     */
    public function setIsAccessibleForFree($is_accessible_for_free)
    {
        $this->container['is_accessible_for_free'] = $is_accessible_for_free;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url thumbnail_url
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets in_language
     *
     * @return string
     */
    public function getInLanguage()
    {
        return $this->container['in_language'];
    }

    /**
     * Sets in_language
     *
     * @param string $in_language in_language
     *
     * @return $this
     */
    public function setInLanguage($in_language)
    {
        $this->container['in_language'] = $in_language;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string[]
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string[] $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets additional_type
     *
     * @return string
     */
    public function getAdditionalType()
    {
        return $this->container['additional_type'];
    }

    /**
     * Sets additional_type
     *
     * @param string $additional_type additional_type
     *
     * @return $this
     */
    public function setAdditionalType($additional_type)
    {
        $this->container['additional_type'] = $additional_type;

        return $this;
    }

    /**
     * Gets alternate_name
     *
     * @return string
     */
    public function getAlternateName()
    {
        return $this->container['alternate_name'];
    }

    /**
     * Sets alternate_name
     *
     * @param string $alternate_name alternate_name
     *
     * @return $this
     */
    public function setAlternateName($alternate_name)
    {
        $this->container['alternate_name'] = $alternate_name;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[] $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets link
     *
     * @return \InfocenterUpdate\Client\Model\DsLinkRequest[]
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \InfocenterUpdate\Client\Model\DsLinkRequest[] $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets same_as
     *
     * @return string
     */
    public function getSameAs()
    {
        return $this->container['same_as'];
    }

    /**
     * Sets same_as
     *
     * @param string $same_as same_as
     *
     * @return $this
     */
    public function setSameAs($same_as)
    {
        $this->container['same_as'] = $same_as;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return map[string,string]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param map[string,string] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disambiguating_description
     *
     * @return map[string,string]
     */
    public function getDisambiguatingDescription()
    {
        return $this->container['disambiguating_description'];
    }

    /**
     * Sets disambiguating_description
     *
     * @param map[string,string] $disambiguating_description disambiguating_description
     *
     * @return $this
     */
    public function setDisambiguatingDescription($disambiguating_description)
    {
        $this->container['disambiguating_description'] = $disambiguating_description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return map[string,string]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param map[string,string] $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
