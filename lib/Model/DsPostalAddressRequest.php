<?php
/**
 * DsPostalAddressRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InfocenterUpdate-TEST
 *
 * Infocenter Update test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InfocenterUpdate\Client\Model;

use \ArrayAccess;
use \InfocenterUpdate\Client\ObjectSerializer;

/**
 * DsPostalAddressRequest Class Doc Comment
 *
 * @category Class
 * @package  InfocenterUpdate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsPostalAddressRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostalAddressRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_country' => 'string',
'address_locality' => 'string',
'address_region' => 'string',
'postal_code' => 'string',
'post_office_box_number' => 'string',
'street_address' => 'string',
'address_line' => 'string',
'available_language' => 'string[]',
'contact_type' => 'string',
'email' => 'string',
'fax_number' => 'string',
'telephone' => 'string',
'hours_available' => '\InfocenterUpdate\Client\Model\DsOpeningHoursSpecificationRequest[]',
'additional_type' => 'string',
'alternate_name' => 'string',
'link' => '\InfocenterUpdate\Client\Model\DsLinkRequest[]',
'same_as' => 'string',
'url' => 'string',
'image' => '\InfocenterUpdate\Client\Model\DsImageObjectRequest',
'description' => 'map[string,string]',
'disambiguating_description' => 'map[string,string]',
'name' => 'map[string,string]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_country' => null,
'address_locality' => null,
'address_region' => null,
'postal_code' => null,
'post_office_box_number' => null,
'street_address' => null,
'address_line' => null,
'available_language' => null,
'contact_type' => null,
'email' => null,
'fax_number' => null,
'telephone' => null,
'hours_available' => null,
'additional_type' => null,
'alternate_name' => null,
'link' => null,
'same_as' => null,
'url' => null,
'image' => null,
'description' => null,
'disambiguating_description' => null,
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_country' => 'addressCountry',
'address_locality' => 'addressLocality',
'address_region' => 'addressRegion',
'postal_code' => 'postalCode',
'post_office_box_number' => 'postOfficeBoxNumber',
'street_address' => 'streetAddress',
'address_line' => 'addressLine',
'available_language' => 'availableLanguage',
'contact_type' => 'contactType',
'email' => 'email',
'fax_number' => 'faxNumber',
'telephone' => 'telephone',
'hours_available' => 'hoursAvailable',
'additional_type' => 'additionalType',
'alternate_name' => 'alternateName',
'link' => 'link',
'same_as' => 'sameAs',
'url' => 'url',
'image' => 'image',
'description' => 'description',
'disambiguating_description' => 'disambiguatingDescription',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_country' => 'setAddressCountry',
'address_locality' => 'setAddressLocality',
'address_region' => 'setAddressRegion',
'postal_code' => 'setPostalCode',
'post_office_box_number' => 'setPostOfficeBoxNumber',
'street_address' => 'setStreetAddress',
'address_line' => 'setAddressLine',
'available_language' => 'setAvailableLanguage',
'contact_type' => 'setContactType',
'email' => 'setEmail',
'fax_number' => 'setFaxNumber',
'telephone' => 'setTelephone',
'hours_available' => 'setHoursAvailable',
'additional_type' => 'setAdditionalType',
'alternate_name' => 'setAlternateName',
'link' => 'setLink',
'same_as' => 'setSameAs',
'url' => 'setUrl',
'image' => 'setImage',
'description' => 'setDescription',
'disambiguating_description' => 'setDisambiguatingDescription',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_country' => 'getAddressCountry',
'address_locality' => 'getAddressLocality',
'address_region' => 'getAddressRegion',
'postal_code' => 'getPostalCode',
'post_office_box_number' => 'getPostOfficeBoxNumber',
'street_address' => 'getStreetAddress',
'address_line' => 'getAddressLine',
'available_language' => 'getAvailableLanguage',
'contact_type' => 'getContactType',
'email' => 'getEmail',
'fax_number' => 'getFaxNumber',
'telephone' => 'getTelephone',
'hours_available' => 'getHoursAvailable',
'additional_type' => 'getAdditionalType',
'alternate_name' => 'getAlternateName',
'link' => 'getLink',
'same_as' => 'getSameAs',
'url' => 'getUrl',
'image' => 'getImage',
'description' => 'getDescription',
'disambiguating_description' => 'getDisambiguatingDescription',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['address_locality'] = isset($data['address_locality']) ? $data['address_locality'] : null;
        $this->container['address_region'] = isset($data['address_region']) ? $data['address_region'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['post_office_box_number'] = isset($data['post_office_box_number']) ? $data['post_office_box_number'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['address_line'] = isset($data['address_line']) ? $data['address_line'] : null;
        $this->container['available_language'] = isset($data['available_language']) ? $data['available_language'] : null;
        $this->container['contact_type'] = isset($data['contact_type']) ? $data['contact_type'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['hours_available'] = isset($data['hours_available']) ? $data['hours_available'] : null;
        $this->container['additional_type'] = isset($data['additional_type']) ? $data['additional_type'] : null;
        $this->container['alternate_name'] = isset($data['alternate_name']) ? $data['alternate_name'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['same_as'] = isset($data['same_as']) ? $data['same_as'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disambiguating_description'] = isset($data['disambiguating_description']) ? $data['disambiguating_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets address_locality
     *
     * @return string
     */
    public function getAddressLocality()
    {
        return $this->container['address_locality'];
    }

    /**
     * Sets address_locality
     *
     * @param string $address_locality address_locality
     *
     * @return $this
     */
    public function setAddressLocality($address_locality)
    {
        $this->container['address_locality'] = $address_locality;

        return $this;
    }

    /**
     * Gets address_region
     *
     * @return string
     */
    public function getAddressRegion()
    {
        return $this->container['address_region'];
    }

    /**
     * Sets address_region
     *
     * @param string $address_region address_region
     *
     * @return $this
     */
    public function setAddressRegion($address_region)
    {
        $this->container['address_region'] = $address_region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets post_office_box_number
     *
     * @return string
     */
    public function getPostOfficeBoxNumber()
    {
        return $this->container['post_office_box_number'];
    }

    /**
     * Sets post_office_box_number
     *
     * @param string $post_office_box_number post_office_box_number
     *
     * @return $this
     */
    public function setPostOfficeBoxNumber($post_office_box_number)
    {
        $this->container['post_office_box_number'] = $post_office_box_number;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address street_address
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets address_line
     *
     * @return string
     */
    public function getAddressLine()
    {
        return $this->container['address_line'];
    }

    /**
     * Sets address_line
     *
     * @param string $address_line address_line
     *
     * @return $this
     */
    public function setAddressLine($address_line)
    {
        $this->container['address_line'] = $address_line;

        return $this;
    }

    /**
     * Gets available_language
     *
     * @return string[]
     */
    public function getAvailableLanguage()
    {
        return $this->container['available_language'];
    }

    /**
     * Sets available_language
     *
     * @param string[] $available_language available_language
     *
     * @return $this
     */
    public function setAvailableLanguage($available_language)
    {
        $this->container['available_language'] = $available_language;

        return $this;
    }

    /**
     * Gets contact_type
     *
     * @return string
     */
    public function getContactType()
    {
        return $this->container['contact_type'];
    }

    /**
     * Sets contact_type
     *
     * @param string $contact_type contact_type
     *
     * @return $this
     */
    public function setContactType($contact_type)
    {
        $this->container['contact_type'] = $contact_type;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number fax_number
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets hours_available
     *
     * @return \InfocenterUpdate\Client\Model\DsOpeningHoursSpecificationRequest[]
     */
    public function getHoursAvailable()
    {
        return $this->container['hours_available'];
    }

    /**
     * Sets hours_available
     *
     * @param \InfocenterUpdate\Client\Model\DsOpeningHoursSpecificationRequest[] $hours_available hours_available
     *
     * @return $this
     */
    public function setHoursAvailable($hours_available)
    {
        $this->container['hours_available'] = $hours_available;

        return $this;
    }

    /**
     * Gets additional_type
     *
     * @return string
     */
    public function getAdditionalType()
    {
        return $this->container['additional_type'];
    }

    /**
     * Sets additional_type
     *
     * @param string $additional_type additional_type
     *
     * @return $this
     */
    public function setAdditionalType($additional_type)
    {
        $this->container['additional_type'] = $additional_type;

        return $this;
    }

    /**
     * Gets alternate_name
     *
     * @return string
     */
    public function getAlternateName()
    {
        return $this->container['alternate_name'];
    }

    /**
     * Sets alternate_name
     *
     * @param string $alternate_name alternate_name
     *
     * @return $this
     */
    public function setAlternateName($alternate_name)
    {
        $this->container['alternate_name'] = $alternate_name;

        return $this;
    }

    /**
     * Gets link
     *
     * @return \InfocenterUpdate\Client\Model\DsLinkRequest[]
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \InfocenterUpdate\Client\Model\DsLinkRequest[] $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets same_as
     *
     * @return string
     */
    public function getSameAs()
    {
        return $this->container['same_as'];
    }

    /**
     * Sets same_as
     *
     * @param string $same_as same_as
     *
     * @return $this
     */
    public function setSameAs($same_as)
    {
        $this->container['same_as'] = $same_as;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \InfocenterUpdate\Client\Model\DsImageObjectRequest
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \InfocenterUpdate\Client\Model\DsImageObjectRequest $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets description
     *
     * @return map[string,string]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param map[string,string] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disambiguating_description
     *
     * @return map[string,string]
     */
    public function getDisambiguatingDescription()
    {
        return $this->container['disambiguating_description'];
    }

    /**
     * Sets disambiguating_description
     *
     * @param map[string,string] $disambiguating_description disambiguating_description
     *
     * @return $this
     */
    public function setDisambiguatingDescription($disambiguating_description)
    {
        $this->container['disambiguating_description'] = $disambiguating_description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return map[string,string]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param map[string,string] $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
